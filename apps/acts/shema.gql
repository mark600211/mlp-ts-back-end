# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Act {
  additions: String!
  applications: [Application!]!
  climaticEnvironmental: String!
  customer: Customer!
  datetime: DateAndTime!
  definedIndicators: [DefinedIndicator!]!
  environmentalEngineer: EnvironmentalEngineer!
  generalCustomer: GeneralCustomer!
  goal: Goal!
  id: ID!
  informationAboutSelection: String!
  isCorrect: Boolean!
  lab: Lab!
  method: Method!
  name: String!
  normativeDocuments: [NormativeDocument!]!
  objectName: String!
  passedSample: PassedSample!
  place: Place!
  planning: String!
  preparation: [Preparation!]!
  representative: Representative!
  sample: String!
  sampleType: SampleType!
  status: String!
  toolType: ToolType!
  typeOfSample: TypeOfSample!
}

input AddresInput {
  building: String
  city: String
  country: String
  region: String
  room: String
  street: String
  zip: String
}

type Address {
  building: String
  city: String
  country: String
  region: String
  room: String
  street: String
  zip: String
}

type Application {
  datetime: DateAndTime!
  id: ID!
  place: String!
}

input ApplicationInput {
  datetime: DateTimeInput!
  id: ID!
  place: String!
}

type Customer {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type DateAndTime {
  date: DateTime!
  time: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeInput {
  date: DateTime!
  time: String!
}

type DefinedIndicator {
  id: ID!
  label: String!
}

type EnvironmentalEngineer {
  id: ID!
  label: String!
}

type GeneralCustomer {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type Goal {
  id: ID!
  label: String!
}

type Lab {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type Method {
  id: ID!
  label: String!
}

type Mutation {
  createAct(data: NewActDto!): Act!
  createApplication(data: PatchAppDto!): Application!
  deleteByIdAct(id: String!): Act
  deleteByIdApplication(id: String!): Application
  updateAct(data: PatchActDto!, id: String!): Act!
  updateApplication(data: PatchAppDto!, id: String!): Application!
  updateWhereAct(data: String!, where: String!): Act!
  updateWhereApplication(data: String!, where: String!): Application!
}

input NewActDto {
  additions: String
  applications: [ApplicationInput!]
  climaticEnvironmental: String
  customer: String!
  datetime: DateTimeInput
  definedIndicators: [String!]
  environmentalEngineer: String
  generalCustomer: String!
  goal: String
  informationAboutSelection: String
  lab: String!
  method: String
  name: String!
  normativeDocument: [String!]
  objectName: String
  passedSample: String
  place: String
  planning: String
  preparation: [String!]
  representative: String
  sample: String
  sampleType: String
  toolType: String
  typeOfSample: String!
}

type NormativeDocument {
  id: ID!
  label: String!
}

type PassedSample {
  id: ID!
  label: String!
}

input PatchActDto {
  additions: String
  applications: [ApplicationInput!]
  climaticEnvironmental: String
  customer: String
  datetime: DateTimeInput
  definedIndicators: [String!]
  environmentalEngineer: String
  generalCustomer: String
  goal: String
  id: String!
  informationAboutSelection: String
  lab: String
  method: String
  name: String
  normativeDocument: [String!]
  objectName: String
  passedSample: String
  place: String
  planning: String
  preparation: [String!]
  representative: String
  sample: String
  sampleType: String
  toolType: String
  typeOfSample: String
}

input PatchAppDto {
  datetime: DateTimeInput!
  place: String!
}

type Place {
  id: ID!
  label: String!
}

type Preparation {
  id: ID!
  label: String!
}

type Query {
  findAllAct(field: String, relations: [String!]): [Act!]!
  findAllApplication(field: String, relations: [String!]): [Application!]!
  findByIdAct(id: String!): Act!
  findByIdApplication(id: String!): Application!
  findManyWhereAct(where: String!): [Act!]!
  findManyWhereApplication(where: String!): [Application!]!
  findOneWhereAct(where: String!): Act!
  findOneWhereApplication(where: String!): Application!
  getTableContent(conditions: TableConditions!): TableContent!
}

type Representative {
  id: ID!
  label: String!
}

type SampleType {
  id: ID!
  label: String!
}

input TableConditions {
  dateRangeEnd: DateTime
  dateRangeStart: DateTime
  skip: Int!
  sort: String
  sortDirection: String
  take: Int!
  wheres: [Where!]
}

type TableContent {
  acts: [Act!]!
  totalCount: Int!
  uniqCustomers: [ID!]!
  uniqGeneralCustomers: [ID!]!
  uniqLabs: [ID!]!
  uniqTypeOfSamples: [ID!]!
}

type ToolType {
  id: ID!
  label: String!
}

type TypeOfSample {
  id: ID!
  label: String!
}

input Where {
  ids: [ID!]!
  relation: String!
}
