# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddresInput {
  building: String
  city: String
  country: String
  region: String
  room: String
  street: String
  zip: String
}

type Address {
  building: String
  city: String
  country: String
  region: String
  room: String
  street: String
  zip: String
}

type Application {
  datetime: DateAndTime!
  id: ID!
  place: String!
}

type ClimaticEnvironmental {
  label: String!
}

type Customer {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type DateAndTime {
  date: DateTime!
  time: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeInput {
  date: DateTime!
  time: String!
}

type DefinedIndicator {
  id: ID!
  label: String!
}

type EnvironmentalEngineer {
  id: ID!
  label: String!
}

type GeneralCustomer {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type Goal {
  id: ID!
  label: String!
}

type Lab {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type Method {
  id: ID!
  label: String!
}

type Mutation {
  createClimaticEnvironmental(data: String!): ClimaticEnvironmental!
  createDefinedIndicator(data: NewDefinedIndicator!): DefinedIndicator!
  createEnvironmentalEngineer(data: NewOption!): EnvironmentalEngineer!
  createGoal(data: NewOption!): Goal!
  createMethod(data: NewOption!): Method!
  createNormativeDocument(data: NewOption!): NormativeDocument!
  createObjectName(data: String!): ObjectName!
  createPassedSample(data: NewOption!): PassedSample!
  createPlace(data: NewOption!): Place!
  createPlanning(data: String!): Planning!
  createPreparation(data: NewOption!): Preparation!
  createRepresentative(data: NewOption!): Representative!
  createSample(data: String!): Sample!
  createSampleType(data: NewOption!): SampleType!
  createToolType(data: NewOption!): ToolType!
  createTypeOfSample(data: NewOption!): TypeOfSample!
  deleteByIdClimaticEnvironmental(id: String!): ClimaticEnvironmental
  deleteByIdDefinedIndicator(id: String!): DefinedIndicator
  deleteByIdEnvironmentalEngineer(id: String!): EnvironmentalEngineer
  deleteByIdGoal(id: String!): Goal
  deleteByIdMethod(id: String!): Method
  deleteByIdNormativeDocument(id: String!): NormativeDocument
  deleteByIdObjectName(id: String!): ObjectName
  deleteByIdPassedSample(id: String!): PassedSample
  deleteByIdPlace(id: String!): Place
  deleteByIdPlanning(id: String!): Planning
  deleteByIdPreparation(id: String!): Preparation
  deleteByIdRepresentative(id: String!): Representative
  deleteByIdSample(id: String!): Sample
  deleteByIdSampleType(id: String!): SampleType
  deleteByIdToolType(id: String!): ToolType
  deleteByIdTypeOfSample(id: String!): TypeOfSample
  updateClimaticEnvironmental(data: String!, id: String!): ClimaticEnvironmental!
  updateDefinedIndicator(data: PatchDefinedIndicator!, id: String!): DefinedIndicator!
  updateEnvironmentalEngineer(data: PatchOption!, id: String!): EnvironmentalEngineer!
  updateGoal(data: PatchOption!, id: String!): Goal!
  updateMethod(data: PatchOption!, id: String!): Method!
  updateNormativeDocument(data: PatchOption!, id: String!): NormativeDocument!
  updateObjectName(data: String!, id: String!): ObjectName!
  updatePassedSample(data: PatchOption!, id: String!): PassedSample!
  updatePlace(data: PatchOption!, id: String!): Place!
  updatePlanning(data: String!, id: String!): Planning!
  updatePreparation(data: PatchOption!, id: String!): Preparation!
  updateRepresentative(data: PatchOption!, id: String!): Representative!
  updateSample(data: String!, id: String!): Sample!
  updateSampleType(data: PatchOption!, id: String!): SampleType!
  updateToolType(data: PatchOption!, id: String!): ToolType!
  updateTypeOfSample(data: PatchOption!, id: String!): TypeOfSample!
  updateWhereClimaticEnvironmental(data: String!, where: String!): ClimaticEnvironmental!
  updateWhereDefinedIndicator(data: String!, where: String!): DefinedIndicator!
  updateWhereEnvironmentalEngineer(data: String!, where: String!): EnvironmentalEngineer!
  updateWhereGoal(data: String!, where: String!): Goal!
  updateWhereMethod(data: String!, where: String!): Method!
  updateWhereNormativeDocument(data: String!, where: String!): NormativeDocument!
  updateWhereObjectName(data: String!, where: String!): ObjectName!
  updateWherePassedSample(data: String!, where: String!): PassedSample!
  updateWherePlace(data: String!, where: String!): Place!
  updateWherePlanning(data: String!, where: String!): Planning!
  updateWherePreparation(data: String!, where: String!): Preparation!
  updateWhereRepresentative(data: String!, where: String!): Representative!
  updateWhereSample(data: String!, where: String!): Sample!
  updateWhereSampleType(data: String!, where: String!): SampleType!
  updateWhereToolType(data: String!, where: String!): ToolType!
  updateWhereTypeOfSample(data: String!, where: String!): TypeOfSample!
}

input NewDefinedIndicator {
  lab: String!
  label: String!
  typeOfSample: String!
}

input NewOption {
  label: String!
}

type NormativeDocument {
  id: ID!
  label: String!
}

type ObjectName {
  label: String!
}

type PassedSample {
  id: ID!
  label: String!
}

input PatchDefinedIndicator {
  id: String!
  lab: String!
  label: String!
  typeOfSample: String!
}

input PatchOption {
  id: String!
  label: String!
}

type Place {
  id: ID!
  label: String!
}

type Planning {
  label: String!
}

type Preparation {
  id: ID!
  label: String!
}

type Query {
  findAllClimaticEnvironmental(field: String, relations: [String!]): [ClimaticEnvironmental!]!
  findAllDefinedIndicator(field: String, relations: [String!]): [DefinedIndicator!]!
  findAllEnvironmentalEngineer(field: String, relations: [String!]): [EnvironmentalEngineer!]!
  findAllGoal(field: String, relations: [String!]): [Goal!]!
  findAllMethod(field: String, relations: [String!]): [Method!]!
  findAllNormativeDocument(field: String, relations: [String!]): [NormativeDocument!]!
  findAllObjectName(field: String, relations: [String!]): [ObjectName!]!
  findAllPassedSample(field: String, relations: [String!]): [PassedSample!]!
  findAllPlace(field: String, relations: [String!]): [Place!]!
  findAllPlanning(field: String, relations: [String!]): [Planning!]!
  findAllPreparation(field: String, relations: [String!]): [Preparation!]!
  findAllRepresentative(field: String, relations: [String!]): [Representative!]!
  findAllSample(field: String, relations: [String!]): [Sample!]!
  findAllSampleType(field: String, relations: [String!]): [SampleType!]!
  findAllToolType(field: String, relations: [String!]): [ToolType!]!
  findAllTypeOfSample(field: String, relations: [String!]): [TypeOfSample!]!
  findByIdClimaticEnvironmental(id: String!): ClimaticEnvironmental!
  findByIdDefinedIndicator(id: String!): DefinedIndicator!
  findByIdEnvironmentalEngineer(id: String!): EnvironmentalEngineer!
  findByIdGoal(id: String!): Goal!
  findByIdMethod(id: String!): Method!
  findByIdNormativeDocument(id: String!): NormativeDocument!
  findByIdObjectName(id: String!): ObjectName!
  findByIdPassedSample(id: String!): PassedSample!
  findByIdPlace(id: String!): Place!
  findByIdPlanning(id: String!): Planning!
  findByIdPreparation(id: String!): Preparation!
  findByIdRepresentative(id: String!): Representative!
  findByIdSample(id: String!): Sample!
  findByIdSampleType(id: String!): SampleType!
  findByIdToolType(id: String!): ToolType!
  findByIdTypeOfSample(id: String!): TypeOfSample!
  findManyWhereClimaticEnvironmental(where: String!): [ClimaticEnvironmental!]!
  findManyWhereDefinedIndicator(where: WhereDefinedIndicator!): [DefinedIndicator!]!
  findManyWhereEnvironmentalEngineer(where: String!): [EnvironmentalEngineer!]!
  findManyWhereGoal(where: String!): [Goal!]!
  findManyWhereMethod(where: String!): [Method!]!
  findManyWhereNormativeDocument(where: String!): [NormativeDocument!]!
  findManyWhereObjectName(where: String!): [ObjectName!]!
  findManyWherePassedSample(where: String!): [PassedSample!]!
  findManyWherePlace(where: String!): [Place!]!
  findManyWherePlanning(where: String!): [Planning!]!
  findManyWherePreparation(where: String!): [Preparation!]!
  findManyWhereRepresentative(where: String!): [Representative!]!
  findManyWhereSample(where: String!): [Sample!]!
  findManyWhereSampleType(where: String!): [SampleType!]!
  findManyWhereToolType(where: String!): [ToolType!]!
  findManyWhereTypeOfSample(where: String!): [TypeOfSample!]!
  findOneWhereClimaticEnvironmental(where: String!): ClimaticEnvironmental!
  findOneWhereDefinedIndicator(where: String!): DefinedIndicator!
  findOneWhereEnvironmentalEngineer(where: String!): EnvironmentalEngineer!
  findOneWhereGoal(where: String!): Goal!
  findOneWhereMethod(where: String!): Method!
  findOneWhereNormativeDocument(where: String!): NormativeDocument!
  findOneWhereObjectName(where: String!): ObjectName!
  findOneWherePassedSample(where: String!): PassedSample!
  findOneWherePlace(where: String!): Place!
  findOneWherePlanning(where: String!): Planning!
  findOneWherePreparation(where: String!): Preparation!
  findOneWhereRepresentative(where: String!): Representative!
  findOneWhereSample(where: String!): Sample!
  findOneWhereSampleType(where: String!): SampleType!
  findOneWhereToolType(where: String!): ToolType!
  findOneWhereTypeOfSample(where: String!): TypeOfSample!
}

type Representative {
  id: ID!
  label: String!
}

type Sample {
  label: String!
}

type SampleType {
  id: ID!
  label: String!
}

type ToolType {
  id: ID!
  label: String!
}

type TypeOfSample {
  id: ID!
  label: String!
}

input WhereDefinedIndicator {
  lab: String!
  typeOfSample: String!
}
