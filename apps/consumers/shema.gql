# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AdditionAct {
  id: ID!
  label: String!
}

input AddresInput {
  building: String
  city: String
  country: String
  region: String
  room: String
  street: String
  zip: String
}

type Address {
  building: String
  city: String
  country: String
  region: String
  room: String
  street: String
  zip: String
}

type Application {
  datetime: DateAndTime!
  id: ID!
  place: String!
}

type ClimaticEnvironmentalAct {
  id: ID!
  label: String!
}

input CreateConsumerDto {
  address: AddresInput
  email: String
  fullname: String!
  label: String!
  tel: String
}

type Customer {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type CustomerAct {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type DateAndTime {
  date: DateTime!
  time: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeInput {
  date: DateTime!
  time: String!
}

type DefinedIndicatorsAct {
  id: ID!
  label: String!
}

type EnvironmentalEngineerAct {
  id: ID!
  label: String!
}

type GeneralCustomer {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type GeneralCustomerAct {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type GoalAct {
  id: ID!
  label: String!
}

type InformationAboutSelectionAct {
  id: ID!
  label: String!
}

type Lab {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type LabAct {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type MethodAct {
  id: ID!
  label: String!
}

type Mutation {
  createCustomer(data: CreateConsumerDto!): Customer!
  createGeneralCustomer(data: CreateConsumerDto!): GeneralCustomer!
  createLab(data: CreateConsumerDto!): Lab!
  updateCustomer(data: PatchConsumerDto!, id: String!): Customer!
  updateGeneralCustomer(data: PatchConsumerDto!, id: String!): GeneralCustomer!
  updateLab(data: PatchConsumerDto!, id: String!): Lab!
  updateWhereCustomer(data: String!, where: String!): Customer!
  updateWhereGeneralCustomer(data: String!, where: String!): GeneralCustomer!
  updateWhereLab(data: String!, where: String!): Lab!
}

type NormativeDocumentAct {
  id: ID!
  label: String!
}

type ObjectNameAct {
  id: ID!
  label: String!
}

type PassedSampleAct {
  id: ID!
  label: String!
}

input PatchConsumerDto {
  address: AddresInput
  email: String
  fullname: String
  id: String!
  label: String
  tel: String
}

type PlaceAct {
  id: ID!
  label: String!
}

type PlanningAct {
  id: ID!
  label: String!
}

type PreparationAct {
  id: ID!
  label: String!
}

type Query {
  findAllCustomer: [Customer!]!
  findAllGeneralCustomer: [GeneralCustomer!]!
  findAllLab: [Lab!]!
  findByIdCustomer(id: String!): Customer!
  findByIdGeneralCustomer(id: String!): GeneralCustomer!
  findByIdLab(id: String!): Lab!
  findManyWhereCustomer(where: String!): [Customer!]!
  findManyWhereGeneralCustomer(where: String!): [GeneralCustomer!]!
  findManyWhereLab(where: String!): [Lab!]!
  findOneWhereCustomer(where: String!): Customer!
  findOneWhereGeneralCustomer(where: String!): GeneralCustomer!
  findOneWhereLab(where: String!): Lab!
}

type RepresentativeAct {
  id: ID!
  label: String!
}

type SampleAct {
  id: ID!
  label: String!
}

type SampleTypeAct {
  id: ID!
  label: String!
}

type ToolTypeAct {
  id: ID!
  label: String!
}

type TypeOfSampleAct {
  id: ID!
  label: String!
}
