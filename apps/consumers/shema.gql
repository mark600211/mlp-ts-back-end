# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddresInput {
  building: String
  city: String
  country: String
  region: String
  room: String
  street: String
  zip: String
}

type Address {
  building: String
  city: String
  country: String
  region: String
  room: String
  street: String
  zip: String
}

type ApplicationBase {
  datetime: DateAndTime
  id: ID!
  place: Place
}

input ApplicationInput {
  datetime: DateTimeInput
  id: ID!
  place: InputPlace
}

input CreateConsumerDto {
  address: AddresInput
  email: String
  fullname: String!
  label: String!
  tel: String
}

type Customer {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type DateAndTime {
  date: DateTime
  time: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeInput {
  date: DateTime
  time: String
}

type DefinedIndicator {
  id: ID!
  label: String!
}

type EnvironmentalEngineer {
  id: ID!
  label: String!
}

type GeneralCustomer {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type Goal {
  id: ID!
  label: String!
}

input InputPlace {
  id: ID!
}

type Lab {
  address: Address!
  email: String
  fullname: String!
  id: ID!
  label: String!
  tel: String
}

type Method {
  id: ID!
  label: String!
}

type Mutation {
  createCustomer(data: CreateConsumerDto!): Customer!
  createGeneralCustomer(data: CreateConsumerDto!): GeneralCustomer!
  createLab(data: CreateConsumerDto!): Lab!
  deleteByIdCustomer(id: String!): Customer
  deleteByIdGeneralCustomer(id: String!): GeneralCustomer
  deleteByIdLab(id: String!): Lab
  updateCustomer(data: PatchConsumerDto!, id: String!): Customer!
  updateGeneralCustomer(data: PatchConsumerDto!, id: String!): GeneralCustomer!
  updateLab(data: PatchConsumerDto!, id: String!): Lab!
  updateWhereCustomer(data: String!, where: String!): Customer!
  updateWhereGeneralCustomer(data: String!, where: String!): GeneralCustomer!
  updateWhereLab(data: String!, where: String!): Lab!
}

type NormativeDocument {
  id: ID!
  label: String!
}

type PassedSample {
  id: ID!
  label: String!
}

input PatchConsumerDto {
  address: AddresInput
  email: String
  fullname: String
  id: String!
  label: String
  tel: String
}

type Place {
  id: ID!
  label: String!
}

type Preparation {
  id: ID!
  label: String!
}

type Query {
  findAllCustomer(field: String, relations: [String!]): [Customer!]!
  findAllGeneralCustomer(field: String, relations: [String!]): [GeneralCustomer!]!
  findAllLab(field: String, relations: [String!]): [Lab!]!
  findByIdCustomer(id: String!, relations: [String!]): Customer!
  findByIdGeneralCustomer(id: String!, relations: [String!]): GeneralCustomer!
  findByIdLab(id: String!, relations: [String!]): Lab!
  findManyByIdsCustomer(ids: [String!]!, relations: [String!]): [Customer!]!
  findManyByIdsGeneralCustomer(ids: [String!]!, relations: [String!]): [GeneralCustomer!]!
  findManyByIdsLab(ids: [String!]!, relations: [String!]): [Lab!]!
  findManyWhereCustomer(where: String!): [Customer!]!
  findManyWhereGeneralCustomer(where: String!): [GeneralCustomer!]!
  findManyWhereLab(where: String!): [Lab!]!
  findOneWhereCustomer(where: String!): Customer!
  findOneWhereGeneralCustomer(where: String!): GeneralCustomer!
  findOneWhereLab(where: String!): Lab!
}

type Representative {
  id: ID!
  label: String!
}

type SampleType {
  id: ID!
  label: String!
}

type ToolType {
  id: ID!
  label: String!
}

type TypeOfSample {
  id: ID!
  label: String!
}
